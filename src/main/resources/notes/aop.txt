面向切面编程

1. What: AOP是一种编程范式。
2. Why: 增强模块化，允许将横跨各节点的关注点(横切式关注点，cross-cutting concerns)进行抽离，单独作为一个模块。
3. How: 动态的给指定的方法(JointPint)增加行为(Advice)，一个Advice可以应用到多个JointPoint，增加的行为由原来的分散在各个节点变为统一在一处进行管理。

Cross-cutting concern: 尽管OO模型中的大多数类将执行单个特定的功能，但它们通常与其他类共享公共的次要需求。例如，我们需要对一个DAO打印其摘要日志，更多的问题可能与安全性有关，如访问控制或信息流控制，尽管每个类都有非常不同的主要功能，但执行次要功能所需的代码通常是相同的。
Modularity: 模块化编程是一种软件设计技术，它强调将程序的功能分离为独立的、可互换的模块，使每个模块都包含执行其所负责的那一部分程序功能所必需的一切。

AOP术语

Join Point: 连接点，即要增强的方法以及位置，包括方法运行前、运行后、异常等节点
Advice: 要增强的行为。
PointCut: 指定哪些方法为关注点的表达式。
Aspect: PointCut + Advice。



